%%%-----------------------------------------------------------------------------
%%% @doc Common-use utility functions.
%%% @end
%%%-----------------------------------------------------------------------------

-module(emas_utils).

%%% API
-export([pairs/1,
         average_number/2,
         format/2]).

%%%=============================================================================
%%% API functions
%%%=============================================================================

%%------------------------------------------------------------------------------
%% @doc Splits list into pairs.
%% @end
%%------------------------------------------------------------------------------
pairs(L) -> pairs(L, []).

%%------------------------------------------------------------------------------
%% @doc Computes an average number of elements that are chosen with given
%%      probability.
%% @end
%%------------------------------------------------------------------------------
average_number(Probability, List) ->
    case Probability * length(List) of
        N when N == 0 ->
            0;
        N when N < 1 ->
            case rand:uniform() < N of
                true -> 1;
                false -> 0
            end;
        N when N >= 1 ->
            trunc(N)
    end.

%%------------------------------------------------------------------------------
%% @doc Returns string that represents data formatted in accordance with
%%      pattern.
%% @end
%%------------------------------------------------------------------------------
format(Pattern, Data) ->
    lists:flatten(io_lib:format(Pattern, Data)).

%%%=============================================================================
%%% Internal functions
%%%=============================================================================

%%------------------------------------------------------------------------------
%% @private
%%------------------------------------------------------------------------------
pairs([], Acc) -> Acc;
pairs([A], Acc) -> [{A} | Acc];
pairs([A, B | L], Acc) -> pairs(L, [{A, B} | Acc]).
